-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_scoring_Block_entry17_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    type_r_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    type_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    type_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    type_r_empty_n : IN STD_LOGIC;
    type_r_read : OUT STD_LOGIC;
    out_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    out_r_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    out_r_empty_n : IN STD_LOGIC;
    out_r_read : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    size_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    size_empty_n : IN STD_LOGIC;
    size_read : OUT STD_LOGIC;
    in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_stream_empty_n : IN STD_LOGIC;
    in1_stream_read : OUT STD_LOGIC;
    in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_stream_empty_n : IN STD_LOGIC;
    in2_stream_read : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of krnl_scoring_Block_entry17_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (72 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (72 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (72 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (72 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (72 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (72 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (72 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (72 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (72 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (72 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (72 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_0 : BOOLEAN := false;

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (72 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal type_r_blk_n : STD_LOGIC;
    signal out_r_blk_n : STD_LOGIC;
    signal gmem0_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal gmem0_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal gmem0_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal size_blk_n : STD_LOGIC;
    signal size_read_reg_164 : STD_LOGIC_VECTOR (31 downto 0);
    signal out_r_read_reg_171 : STD_LOGIC_VECTOR (63 downto 0);
    signal type_r_read_read_fu_78_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal type_r_read_reg_176 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_euclidean_fu_100_ap_start : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_done : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_idle : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_ready : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_in1_stream_read : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_in2_stream_read : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_result : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_euclidean_fu_100_result_ap_vld : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_ext_blocking_n : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_str_blocking_n : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_int_blocking_n : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_start : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_done : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_idle : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_ready : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_in1_stream_read : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_in2_stream_read : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_result : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_cosine_fu_112_result_ap_vld : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_ext_blocking_n : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_str_blocking_n : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_ap_int_blocking_n : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_grp_fu_186_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_cosine_fu_112_grp_fu_186_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_cosine_fu_112_grp_fu_186_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_scoring_cosine_fu_112_grp_fu_186_p_ce : STD_LOGIC;
    signal grp_scoring_cosine_fu_112_grp_fu_190_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_cosine_fu_112_grp_fu_190_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_cosine_fu_112_grp_fu_190_p_ce : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_start : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_done : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_idle : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_ready : STD_LOGIC;
    signal grp_scoring_product_fu_124_result_o : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_fu_124_result_o_ap_vld : STD_LOGIC;
    signal grp_scoring_product_fu_124_in1_stream_read : STD_LOGIC;
    signal grp_scoring_product_fu_124_in2_stream_read : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_ext_blocking_n : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_str_blocking_n : STD_LOGIC;
    signal grp_scoring_product_fu_124_ap_int_blocking_n : STD_LOGIC;
    signal grp_scoring_product_fu_124_grp_fu_186_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_fu_124_grp_fu_186_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_fu_124_grp_fu_186_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_scoring_product_fu_124_grp_fu_186_p_ce : STD_LOGIC;
    signal grp_scoring_product_fu_124_grp_fu_190_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_fu_124_grp_fu_190_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_fu_124_grp_fu_190_p_ce : STD_LOGIC;
    signal grp_scoring_euclidean_fu_100_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call0 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_scoring_cosine_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal grp_scoring_product_fu_124_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sext_ln69_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_135_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_186_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_186_ce : STD_LOGIC;
    signal grp_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_190_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (72 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_wait_1 : STD_LOGIC;
    signal ap_sub_ext_blocking_1 : STD_LOGIC;
    signal ap_wait_2 : STD_LOGIC;
    signal ap_sub_ext_blocking_2 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_sub_str_blocking_1 : STD_LOGIC;
    signal ap_sub_str_blocking_2 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_sub_int_blocking_1 : STD_LOGIC;
    signal ap_sub_int_blocking_2 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_scoring_scoring_euclidean IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_empty_n : IN STD_LOGIC;
        in1_stream_read : OUT STD_LOGIC;
        in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_empty_n : IN STD_LOGIC;
        in2_stream_read : OUT STD_LOGIC;
        result : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_ap_vld : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component krnl_scoring_scoring_cosine IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_empty_n : IN STD_LOGIC;
        in1_stream_read : OUT STD_LOGIC;
        in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_empty_n : IN STD_LOGIC;
        in2_stream_read : OUT STD_LOGIC;
        result : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_ap_vld : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC;
        grp_fu_186_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_186_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_ce : OUT STD_LOGIC;
        grp_fu_190_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_ce : OUT STD_LOGIC );
    end component;


    component krnl_scoring_scoring_product IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        result_i : IN STD_LOGIC_VECTOR (31 downto 0);
        result_o : OUT STD_LOGIC_VECTOR (31 downto 0);
        result_o_ap_vld : OUT STD_LOGIC;
        in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_empty_n : IN STD_LOGIC;
        in1_stream_read : OUT STD_LOGIC;
        in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_empty_n : IN STD_LOGIC;
        in2_stream_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC;
        grp_fu_186_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_186_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_186_p_ce : OUT STD_LOGIC;
        grp_fu_190_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_190_p_ce : OUT STD_LOGIC );
    end component;


    component krnl_scoring_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_scoring_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_scoring_euclidean_fu_100 : component krnl_scoring_scoring_euclidean
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scoring_euclidean_fu_100_ap_start,
        ap_done => grp_scoring_euclidean_fu_100_ap_done,
        ap_idle => grp_scoring_euclidean_fu_100_ap_idle,
        ap_ready => grp_scoring_euclidean_fu_100_ap_ready,
        size => size_read_reg_164,
        in1_stream_dout => in1_stream_dout,
        in1_stream_num_data_valid => ap_const_lv2_0,
        in1_stream_fifo_cap => ap_const_lv2_0,
        in1_stream_empty_n => in1_stream_empty_n,
        in1_stream_read => grp_scoring_euclidean_fu_100_in1_stream_read,
        in2_stream_dout => in2_stream_dout,
        in2_stream_num_data_valid => ap_const_lv2_0,
        in2_stream_fifo_cap => ap_const_lv2_0,
        in2_stream_empty_n => in2_stream_empty_n,
        in2_stream_read => grp_scoring_euclidean_fu_100_in2_stream_read,
        result => grp_scoring_euclidean_fu_100_result,
        result_ap_vld => grp_scoring_euclidean_fu_100_result_ap_vld,
        ap_ext_blocking_n => grp_scoring_euclidean_fu_100_ap_ext_blocking_n,
        ap_str_blocking_n => grp_scoring_euclidean_fu_100_ap_str_blocking_n,
        ap_int_blocking_n => grp_scoring_euclidean_fu_100_ap_int_blocking_n);

    grp_scoring_cosine_fu_112 : component krnl_scoring_scoring_cosine
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scoring_cosine_fu_112_ap_start,
        ap_done => grp_scoring_cosine_fu_112_ap_done,
        ap_idle => grp_scoring_cosine_fu_112_ap_idle,
        ap_ready => grp_scoring_cosine_fu_112_ap_ready,
        size => size_read_reg_164,
        in1_stream_dout => in1_stream_dout,
        in1_stream_num_data_valid => ap_const_lv2_0,
        in1_stream_fifo_cap => ap_const_lv2_0,
        in1_stream_empty_n => in1_stream_empty_n,
        in1_stream_read => grp_scoring_cosine_fu_112_in1_stream_read,
        in2_stream_dout => in2_stream_dout,
        in2_stream_num_data_valid => ap_const_lv2_0,
        in2_stream_fifo_cap => ap_const_lv2_0,
        in2_stream_empty_n => in2_stream_empty_n,
        in2_stream_read => grp_scoring_cosine_fu_112_in2_stream_read,
        result => grp_scoring_cosine_fu_112_result,
        result_ap_vld => grp_scoring_cosine_fu_112_result_ap_vld,
        ap_ext_blocking_n => grp_scoring_cosine_fu_112_ap_ext_blocking_n,
        ap_str_blocking_n => grp_scoring_cosine_fu_112_ap_str_blocking_n,
        ap_int_blocking_n => grp_scoring_cosine_fu_112_ap_int_blocking_n,
        grp_fu_186_p_din0 => grp_scoring_cosine_fu_112_grp_fu_186_p_din0,
        grp_fu_186_p_din1 => grp_scoring_cosine_fu_112_grp_fu_186_p_din1,
        grp_fu_186_p_opcode => grp_scoring_cosine_fu_112_grp_fu_186_p_opcode,
        grp_fu_186_p_dout0 => grp_fu_186_p2,
        grp_fu_186_p_ce => grp_scoring_cosine_fu_112_grp_fu_186_p_ce,
        grp_fu_190_p_din0 => grp_scoring_cosine_fu_112_grp_fu_190_p_din0,
        grp_fu_190_p_din1 => grp_scoring_cosine_fu_112_grp_fu_190_p_din1,
        grp_fu_190_p_dout0 => grp_fu_190_p2,
        grp_fu_190_p_ce => grp_scoring_cosine_fu_112_grp_fu_190_p_ce);

    grp_scoring_product_fu_124 : component krnl_scoring_scoring_product
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scoring_product_fu_124_ap_start,
        ap_done => grp_scoring_product_fu_124_ap_done,
        ap_idle => grp_scoring_product_fu_124_ap_idle,
        ap_ready => grp_scoring_product_fu_124_ap_ready,
        size => size_read_reg_164,
        result_i => result,
        result_o => grp_scoring_product_fu_124_result_o,
        result_o_ap_vld => grp_scoring_product_fu_124_result_o_ap_vld,
        in1_stream_dout => in1_stream_dout,
        in1_stream_num_data_valid => ap_const_lv2_0,
        in1_stream_fifo_cap => ap_const_lv2_0,
        in1_stream_empty_n => in1_stream_empty_n,
        in1_stream_read => grp_scoring_product_fu_124_in1_stream_read,
        in2_stream_dout => in2_stream_dout,
        in2_stream_num_data_valid => ap_const_lv2_0,
        in2_stream_fifo_cap => ap_const_lv2_0,
        in2_stream_empty_n => in2_stream_empty_n,
        in2_stream_read => grp_scoring_product_fu_124_in2_stream_read,
        ap_ext_blocking_n => grp_scoring_product_fu_124_ap_ext_blocking_n,
        ap_str_blocking_n => grp_scoring_product_fu_124_ap_str_blocking_n,
        ap_int_blocking_n => grp_scoring_product_fu_124_ap_int_blocking_n,
        grp_fu_186_p_din0 => grp_scoring_product_fu_124_grp_fu_186_p_din0,
        grp_fu_186_p_din1 => grp_scoring_product_fu_124_grp_fu_186_p_din1,
        grp_fu_186_p_opcode => grp_scoring_product_fu_124_grp_fu_186_p_opcode,
        grp_fu_186_p_dout0 => grp_fu_186_p2,
        grp_fu_186_p_ce => grp_scoring_product_fu_124_grp_fu_186_p_ce,
        grp_fu_190_p_din0 => grp_scoring_product_fu_124_grp_fu_190_p_din0,
        grp_fu_190_p_din1 => grp_scoring_product_fu_124_grp_fu_190_p_din1,
        grp_fu_190_p_dout0 => grp_fu_190_p2,
        grp_fu_190_p_ce => grp_scoring_product_fu_124_grp_fu_190_p_ce);

    fadd_32ns_32ns_32_7_full_dsp_1_U63 : component krnl_scoring_fadd_32ns_32ns_32_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_186_p0,
        din1 => grp_fu_186_p1,
        ce => grp_fu_186_ce,
        dout => grp_fu_186_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U64 : component krnl_scoring_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_190_p0,
        din1 => grp_fu_190_p1,
        ce => grp_fu_190_ce,
        dout => grp_fu_190_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem0_BVALID = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_scoring_cosine_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scoring_cosine_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (type_r_read_read_fu_78_p2 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_scoring_cosine_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scoring_cosine_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_scoring_cosine_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scoring_euclidean_fu_100_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scoring_euclidean_fu_100_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (type_r_read_read_fu_78_p2 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_scoring_euclidean_fu_100_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scoring_euclidean_fu_100_ap_ready = ap_const_logic_1)) then 
                    grp_scoring_euclidean_fu_100_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_scoring_product_fu_124_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scoring_product_fu_124_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_scoring_product_fu_124_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scoring_product_fu_124_ap_ready = ap_const_logic_1)) then 
                    grp_scoring_product_fu_124_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    result_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_scoring_product_fu_124_result_o_ap_vld = ap_const_logic_1) and (type_r_read_reg_176 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                result <= grp_scoring_product_fu_124_result_o;
            elsif (((grp_scoring_cosine_fu_112_result_ap_vld = ap_const_logic_1) and (type_r_read_reg_176 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                result <= grp_scoring_cosine_fu_112_result;
            elsif (((grp_scoring_euclidean_fu_100_result_ap_vld = ap_const_logic_1) and (type_r_read_reg_176 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                result <= grp_scoring_euclidean_fu_100_result;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                out_r_read_reg_171 <= out_r_dout;
                size_read_reg_164 <= size_dout;
                type_r_read_reg_176 <= type_r_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, type_r_empty_n, out_r_empty_n, m_axi_gmem0_AWREADY, m_axi_gmem0_WREADY, m_axi_gmem0_BVALID, size_empty_n, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state73, type_r_read_read_fu_78_p2, type_r_read_reg_176, ap_CS_fsm_state2, ap_block_state4_on_subcall_done, ap_block_state2_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not((type_r_read_read_fu_78_p2 = ap_const_lv32_0)) and not((type_r_read_read_fu_78_p2 = ap_const_lv32_1)) and not((type_r_read_read_fu_78_p2 = ap_const_lv32_2)) and not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (type_r_read_read_fu_78_p2 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and ((type_r_read_read_fu_78_p2 = ap_const_lv32_1) or (type_r_read_read_fu_78_p2 = ap_const_lv32_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_boolean_0 = ap_block_state2_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((type_r_read_reg_176 = ap_const_lv32_1) or (type_r_read_reg_176 = ap_const_lv32_2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if ((not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or (m_axi_gmem0_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_gmem0_WREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem0_BVALID = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
        if (((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;

    ap_ST_fsm_state2_blk_assign_proc : process(ap_block_state2_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state2_on_subcall_done)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;
    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(m_axi_gmem0_AWREADY, ap_block_state4_on_subcall_done)
    begin
        if (((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or (m_axi_gmem0_AWREADY = ap_const_logic_0))) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(m_axi_gmem0_WREADY)
    begin
        if ((m_axi_gmem0_WREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;

    ap_ST_fsm_state73_blk_assign_proc : process(m_axi_gmem0_BVALID)
    begin
        if ((m_axi_gmem0_BVALID = ap_const_logic_0)) then 
            ap_ST_fsm_state73_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state73_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
                ap_block_state1 <= ((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call0_assign_proc : process(ap_start, ap_done_reg, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
                ap_block_state1_ignore_call0 <= ((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0));
    end process;


    ap_block_state2_on_subcall_done_assign_proc : process(type_r_read_reg_176, grp_scoring_euclidean_fu_100_ap_done, grp_scoring_cosine_fu_112_ap_done)
    begin
                ap_block_state2_on_subcall_done <= (((grp_scoring_cosine_fu_112_ap_done = ap_const_logic_0) and (type_r_read_reg_176 = ap_const_lv32_1)) or ((grp_scoring_euclidean_fu_100_ap_done = ap_const_logic_0) and (type_r_read_reg_176 = ap_const_lv32_2)));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(type_r_read_reg_176, grp_scoring_product_fu_124_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_scoring_product_fu_124_ap_done = ap_const_logic_0) and (type_r_read_reg_176 = ap_const_lv32_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, m_axi_gmem0_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem0_BVALID = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_cur_n <= (gmem0_blk_n_W and gmem0_blk_n_B and gmem0_blk_n_AW);
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0, ap_wait_1, ap_sub_ext_blocking_1, ap_wait_2, ap_sub_ext_blocking_2)
    begin
        if ((((ap_wait_2 and ap_sub_ext_blocking_2) = ap_const_logic_1) and ((ap_wait_1 and ap_sub_ext_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1))) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (type_r_blk_n and size_blk_n and out_r_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_wait_2, ap_sub_int_blocking_0, ap_sub_int_blocking_1, ap_sub_int_blocking_2)
    begin
        if ((((ap_wait_2 and ap_sub_int_blocking_2) = ap_const_logic_1) and ((ap_wait_1 and ap_sub_int_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1))) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(m_axi_gmem0_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem0_BVALID = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_wait_1, ap_wait_2, ap_sub_str_blocking_0, ap_sub_str_blocking_1, ap_sub_str_blocking_2)
    begin
        if ((((ap_wait_2 and ap_sub_str_blocking_2) = ap_const_logic_1) and ((ap_wait_1 and ap_sub_str_blocking_1) = ap_const_logic_1) and ((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1))) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_scoring_euclidean_fu_100_ap_ext_blocking_n)
    begin
        if ((grp_scoring_euclidean_fu_100_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_ext_blocking_1_assign_proc : process(grp_scoring_cosine_fu_112_ap_ext_blocking_n)
    begin
        if ((grp_scoring_cosine_fu_112_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_ext_blocking_2_assign_proc : process(grp_scoring_product_fu_124_ap_ext_blocking_n)
    begin
        if ((grp_scoring_product_fu_124_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_2 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_scoring_euclidean_fu_100_ap_int_blocking_n)
    begin
        if ((grp_scoring_euclidean_fu_100_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_1_assign_proc : process(grp_scoring_cosine_fu_112_ap_int_blocking_n)
    begin
        if ((grp_scoring_cosine_fu_112_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_2_assign_proc : process(grp_scoring_product_fu_124_ap_int_blocking_n)
    begin
        if ((grp_scoring_product_fu_124_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_2 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_scoring_euclidean_fu_100_ap_str_blocking_n)
    begin
        if ((grp_scoring_euclidean_fu_100_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_1_assign_proc : process(grp_scoring_cosine_fu_112_ap_str_blocking_n)
    begin
        if ((grp_scoring_cosine_fu_112_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_1 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_2_assign_proc : process(grp_scoring_product_fu_124_ap_str_blocking_n)
    begin
        if ((grp_scoring_product_fu_124_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_2 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_1_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            ap_wait_1 <= ap_const_logic_1;
        else 
            ap_wait_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_2_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state4 = ap_CS_fsm)) then 
            ap_wait_2 <= ap_const_logic_1;
        else 
            ap_wait_2 <= ap_const_logic_0;
        end if; 
    end process;


    gmem0_blk_n_AW_assign_proc : process(m_axi_gmem0_AWREADY, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            gmem0_blk_n_AW <= m_axi_gmem0_AWREADY;
        else 
            gmem0_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_B_assign_proc : process(m_axi_gmem0_BVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem0_blk_n_B <= m_axi_gmem0_BVALID;
        else 
            gmem0_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    gmem0_blk_n_W_assign_proc : process(m_axi_gmem0_WREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            gmem0_blk_n_W <= m_axi_gmem0_WREADY;
        else 
            gmem0_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_186_ce_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_186_p_ce, grp_scoring_product_fu_124_grp_fu_186_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_186_ce <= grp_scoring_product_fu_124_grp_fu_186_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_186_ce <= grp_scoring_cosine_fu_112_grp_fu_186_p_ce;
        else 
            grp_fu_186_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_186_p0_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_186_p_din0, grp_scoring_product_fu_124_grp_fu_186_p_din0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_186_p0 <= grp_scoring_product_fu_124_grp_fu_186_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_186_p0 <= grp_scoring_cosine_fu_112_grp_fu_186_p_din0;
        else 
            grp_fu_186_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_186_p1_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_186_p_din1, grp_scoring_product_fu_124_grp_fu_186_p_din1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_186_p1 <= grp_scoring_product_fu_124_grp_fu_186_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_186_p1 <= grp_scoring_cosine_fu_112_grp_fu_186_p_din1;
        else 
            grp_fu_186_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_ce_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_190_p_ce, grp_scoring_product_fu_124_grp_fu_190_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_190_ce <= grp_scoring_product_fu_124_grp_fu_190_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_190_ce <= grp_scoring_cosine_fu_112_grp_fu_190_p_ce;
        else 
            grp_fu_190_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_190_p0_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_190_p_din0, grp_scoring_product_fu_124_grp_fu_190_p_din0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_190_p0 <= grp_scoring_product_fu_124_grp_fu_190_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_190_p0 <= grp_scoring_cosine_fu_112_grp_fu_190_p_din0;
        else 
            grp_fu_190_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_190_p1_assign_proc : process(ap_CS_fsm_state4, grp_scoring_cosine_fu_112_grp_fu_190_p_din1, grp_scoring_product_fu_124_grp_fu_190_p_din1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_190_p1 <= grp_scoring_product_fu_124_grp_fu_190_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_190_p1 <= grp_scoring_cosine_fu_112_grp_fu_190_p_din1;
        else 
            grp_fu_190_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_scoring_cosine_fu_112_ap_start <= grp_scoring_cosine_fu_112_ap_start_reg;
    grp_scoring_euclidean_fu_100_ap_start <= grp_scoring_euclidean_fu_100_ap_start_reg;
    grp_scoring_product_fu_124_ap_start <= grp_scoring_product_fu_124_ap_start_reg;

    in1_stream_read_assign_proc : process(ap_CS_fsm_state4, type_r_read_reg_176, grp_scoring_euclidean_fu_100_in1_stream_read, grp_scoring_cosine_fu_112_in1_stream_read, grp_scoring_product_fu_124_in1_stream_read, ap_CS_fsm_state2)
    begin
        if (((type_r_read_reg_176 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in1_stream_read <= grp_scoring_product_fu_124_in1_stream_read;
        elsif (((type_r_read_reg_176 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_stream_read <= grp_scoring_cosine_fu_112_in1_stream_read;
        elsif (((type_r_read_reg_176 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in1_stream_read <= grp_scoring_euclidean_fu_100_in1_stream_read;
        else 
            in1_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_stream_read_assign_proc : process(ap_CS_fsm_state4, type_r_read_reg_176, grp_scoring_euclidean_fu_100_in2_stream_read, grp_scoring_cosine_fu_112_in2_stream_read, grp_scoring_product_fu_124_in2_stream_read, ap_CS_fsm_state2)
    begin
        if (((type_r_read_reg_176 = ap_const_lv32_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            in2_stream_read <= grp_scoring_product_fu_124_in2_stream_read;
        elsif (((type_r_read_reg_176 = ap_const_lv32_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in2_stream_read <= grp_scoring_cosine_fu_112_in2_stream_read;
        elsif (((type_r_read_reg_176 = ap_const_lv32_2) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            in2_stream_read <= grp_scoring_euclidean_fu_100_in2_stream_read;
        else 
            in2_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_ARADDR <= ap_const_lv64_0;
    m_axi_gmem0_ARBURST <= ap_const_lv2_0;
    m_axi_gmem0_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem0_ARID <= ap_const_lv1_0;
    m_axi_gmem0_ARLEN <= ap_const_lv32_0;
    m_axi_gmem0_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem0_ARPROT <= ap_const_lv3_0;
    m_axi_gmem0_ARQOS <= ap_const_lv4_0;
    m_axi_gmem0_ARREGION <= ap_const_lv4_0;
    m_axi_gmem0_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem0_ARUSER <= ap_const_lv1_0;
    m_axi_gmem0_ARVALID <= ap_const_logic_0;
    m_axi_gmem0_AWADDR <= sext_ln69_fu_144_p1;
    m_axi_gmem0_AWBURST <= ap_const_lv2_0;
    m_axi_gmem0_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem0_AWID <= ap_const_lv1_0;
    m_axi_gmem0_AWLEN <= ap_const_lv32_1;
    m_axi_gmem0_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem0_AWPROT <= ap_const_lv3_0;
    m_axi_gmem0_AWQOS <= ap_const_lv4_0;
    m_axi_gmem0_AWREGION <= ap_const_lv4_0;
    m_axi_gmem0_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem0_AWUSER <= ap_const_lv1_0;

    m_axi_gmem0_AWVALID_assign_proc : process(m_axi_gmem0_AWREADY, ap_CS_fsm_state4, ap_block_state4_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state4_on_subcall_done) or (m_axi_gmem0_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            m_axi_gmem0_AWVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_gmem0_BREADY_assign_proc : process(m_axi_gmem0_BVALID, ap_CS_fsm_state73)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state73) and (m_axi_gmem0_BVALID = ap_const_logic_1))) then 
            m_axi_gmem0_BREADY <= ap_const_logic_1;
        else 
            m_axi_gmem0_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem0_RREADY <= ap_const_logic_0;
    m_axi_gmem0_WDATA <= result;
    m_axi_gmem0_WID <= ap_const_lv1_0;
    m_axi_gmem0_WLAST <= ap_const_logic_0;
    m_axi_gmem0_WSTRB <= ap_const_lv4_F;
    m_axi_gmem0_WUSER <= ap_const_lv1_0;

    m_axi_gmem0_WVALID_assign_proc : process(m_axi_gmem0_WREADY, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (m_axi_gmem0_WREADY = ap_const_logic_1))) then 
            m_axi_gmem0_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem0_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    out_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, out_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_blk_n <= out_r_empty_n;
        else 
            out_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    out_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
        if ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            out_r_read <= ap_const_logic_1;
        else 
            out_r_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln69_fu_144_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_135_p4),64));


    size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_blk_n <= size_empty_n;
        else 
            size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
        if ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_read <= ap_const_logic_1;
        else 
            size_read <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln_fu_135_p4 <= out_r_read_reg_171(63 downto 2);

    type_r_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, type_r_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            type_r_blk_n <= type_r_empty_n;
        else 
            type_r_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    type_r_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, type_r_empty_n, out_r_empty_n, size_empty_n)
    begin
        if ((not(((type_r_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (out_r_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            type_r_read <= ap_const_logic_1;
        else 
            type_r_read <= ap_const_logic_0;
        end if; 
    end process;

    type_r_read_read_fu_78_p2 <= type_r_dout;
end behav;

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_scoring_scoring_product is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size : IN STD_LOGIC_VECTOR (31 downto 0);
    result_i : IN STD_LOGIC_VECTOR (31 downto 0);
    result_o : OUT STD_LOGIC_VECTOR (31 downto 0);
    result_o_ap_vld : OUT STD_LOGIC;
    in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in1_stream_empty_n : IN STD_LOGIC;
    in1_stream_read : OUT STD_LOGIC;
    in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    in2_stream_empty_n : IN STD_LOGIC;
    in2_stream_read : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC;
    grp_fu_186_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_186_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_186_p_ce : OUT STD_LOGIC;
    grp_fu_190_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_190_p_ce : OUT STD_LOGIC );
end;


architecture behav of krnl_scoring_scoring_product is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal empty_fu_47_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_reg_72 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln15_fu_52_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_83 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_idle : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ready : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out_ap_vld : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in1_stream_read : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in2_stream_read : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ext_blocking_n : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_str_blocking_n : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_int_blocking_n : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_ce : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_ce : STD_LOGIC;
    signal grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_fu_90_ce : STD_LOGIC;
    signal grp_fu_94_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_scoring_scoring_product_Pipeline_VITIS_LOOP_15_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        result_load : IN STD_LOGIC_VECTOR (31 downto 0);
        size : IN STD_LOGIC_VECTOR (30 downto 0);
        add5_i_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        add5_i_out_ap_vld : OUT STD_LOGIC;
        in1_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in1_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in1_stream_empty_n : IN STD_LOGIC;
        in1_stream_read : OUT STD_LOGIC;
        in2_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        in2_stream_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        in2_stream_empty_n : IN STD_LOGIC;
        in2_stream_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC;
        grp_fu_90_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_90_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_90_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_90_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_90_p_ce : OUT STD_LOGIC;
        grp_fu_94_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_94_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_94_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_94_p_ce : OUT STD_LOGIC );
    end component;


    component krnl_scoring_fadd_32ns_32ns_32_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_scoring_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36 : component krnl_scoring_scoring_product_Pipeline_VITIS_LOOP_15_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start,
        ap_done => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done,
        ap_idle => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_idle,
        ap_ready => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ready,
        result_load => result_i,
        size => empty_reg_72,
        add5_i_out => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out,
        add5_i_out_ap_vld => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out_ap_vld,
        in1_stream_dout => in1_stream_dout,
        in1_stream_num_data_valid => ap_const_lv2_0,
        in1_stream_fifo_cap => ap_const_lv2_0,
        in1_stream_empty_n => in1_stream_empty_n,
        in1_stream_read => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in1_stream_read,
        in2_stream_dout => in2_stream_dout,
        in2_stream_num_data_valid => ap_const_lv2_0,
        in2_stream_fifo_cap => ap_const_lv2_0,
        in2_stream_empty_n => in2_stream_empty_n,
        in2_stream_read => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in2_stream_read,
        ap_ext_blocking_n => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ext_blocking_n,
        ap_str_blocking_n => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_str_blocking_n,
        ap_int_blocking_n => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_int_blocking_n,
        grp_fu_90_p_din0 => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din0,
        grp_fu_90_p_din1 => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din1,
        grp_fu_90_p_opcode => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_opcode,
        grp_fu_90_p_dout0 => grp_fu_186_p_dout0,
        grp_fu_90_p_ce => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_ce,
        grp_fu_94_p_din0 => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din0,
        grp_fu_94_p_din1 => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din1,
        grp_fu_94_p_dout0 => grp_fu_190_p_dout0,
        grp_fu_94_p_ce => grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_52_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ready = ap_const_logic_1)) then 
                    grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                empty_reg_72 <= empty_fu_47_p1;
                icmp_ln15_reg_83 <= icmp_ln15_fu_52_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln15_fu_52_p2, grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_52_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((ap_start = ap_const_logic_1) and (icmp_ln15_fu_52_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done)
    begin
        if ((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_const_logic_1);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ext_blocking_n)
    begin
        if ((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_int_blocking_n)
    begin
        if ((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_str_blocking_n)
    begin
        if ((grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state2 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_47_p1 <= size(31 - 1 downto 0);
    grp_fu_186_p_ce <= grp_fu_90_ce;
    grp_fu_186_p_din0 <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din0;
    grp_fu_186_p_din1 <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_din1;
    grp_fu_186_p_opcode <= ap_const_lv2_0;
    grp_fu_190_p_ce <= grp_fu_94_ce;
    grp_fu_190_p_din0 <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din0;
    grp_fu_190_p_din1 <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_din1;

    grp_fu_90_ce_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_90_ce <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_90_p_ce;
        else 
            grp_fu_90_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_94_ce_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_ce, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_94_ce <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_grp_fu_94_p_ce;
        else 
            grp_fu_94_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_ap_start_reg;
    icmp_ln15_fu_52_p2 <= "1" when (signed(size) > signed(ap_const_lv32_0)) else "0";

    in1_stream_read_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in1_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in1_stream_read <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in1_stream_read;
        else 
            in1_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    in2_stream_read_assign_proc : process(grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in2_stream_read, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in2_stream_read <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_in2_stream_read;
        else 
            in2_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    result_o_assign_proc : process(result_i, icmp_ln15_reg_83, grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out, ap_CS_fsm_state3)
    begin
        if (((icmp_ln15_reg_83 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            result_o <= grp_scoring_product_Pipeline_VITIS_LOOP_15_1_fu_36_add5_i_out;
        else 
            result_o <= result_i;
        end if; 
    end process;


    result_o_ap_vld_assign_proc : process(icmp_ln15_reg_83, ap_CS_fsm_state3)
    begin
        if (((icmp_ln15_reg_83 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            result_o_ap_vld <= ap_const_logic_1;
        else 
            result_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
